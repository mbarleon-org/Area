name: Create tag when PR into main is merged
on:
  pull_request:
    branches: [main]
    types: [closed]

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  tag-on-merge:
    if: ${{ github.event.pull_request.merged == true &&
            github.event.pull_request.base.ref == 'main' &&
            github.event.pull_request.head.ref == 'staging'
        }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: main
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push next semver tag (patch)
        id: create_tag
        run: |
          set -euo pipefail
          git fetch --tags origin

          LATEST=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1)
          [ -z "$LATEST" ] && LATEST="v0.0.0"

          ver="${LATEST#v}"
          IFS='.' read -r MAJ MIN PAT <<<"$ver"
          NEXT="v${MAJ}.${MIN}.$((PAT+1))"

          while git rev-parse -q --verify "refs/tags/$NEXT" >/dev/null; do
            ver="${NEXT#v}"
            IFS='.' read -r MAJ MIN PAT <<<"$ver"
            NEXT="v${MAJ}.${MIN}.$((PAT+1))"
          done

          echo "Tagging $NEXT"
          git tag -a "$NEXT" -m "Release $NEXT"
          git push "https://x-access-token:${{ secrets.AREA_PUSH_TOKEN }}@github.com/${{ github.repository }}" "$NEXT"
          echo "TAG=$NEXT" >> $GITHUB_OUTPUT
        env:
          GIT_ASKPASS: /bin/echo
          GITHUB_TOKEN: ${{ secrets.AREA_PUSH_TOKEN }}

      - name: Checkout the created tag
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.create_tag.outputs.TAG }}
          fetch-depth: 0
          submodules: true

      - name: Set BUILD_DATE (UTC ISO8601)
        id: build_date
        run: echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.AREA_PUSH_TOKEN }}

      - name: Compute image tags
        id: compute_tags
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/area
          REF_NAME: ${{ steps.create_tag.outputs.TAG }}
        run: |
          echo "TAGS<<EOF" >> "$GITHUB_OUTPUT"
          if [[ "${REF_NAME}" == *"-"* ]]; then
            echo "${IMAGE_NAME}:$(echo "$REF_NAME" | cut -d'-' -f 2)-latest" >> "$GITHUB_OUTPUT"
          else
            echo "${IMAGE_NAME}:latest" >> "$GITHUB_OUTPUT"
          fi
          echo "${IMAGE_NAME}:${REF_NAME}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            BUILD_DATE=${{ steps.build_date.outputs.BUILD_DATE }}
            VCS_REF=${{ github.sha }}
          tags: ${{ steps.compute_tags.outputs.TAGS }}
          platforms: linux/amd64,linux/arm64

      - name: Install cloudflared (single binary)
        run: |
          set -euo pipefail
          TMP_BIN=/tmp/cloudflared
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o "$TMP_BIN"
          chmod +x "$TMP_BIN"
          sudo mv "$TMP_BIN" /usr/local/bin/cloudflared

      - name: Start CF tunnel on random port
        id: cf
        run: |
          set -euo pipefail
          LOG=/tmp/cloudflared.log
          rm -f "$LOG"

          preferred_port=$(shuf -i 20000-30000 -n 1)

          cloudflared access tcp \
            --hostname "${{ secrets.VM_HOST }}" \
            --url 127.0.0.1:$preferred_port \
            --service-token-id "${{ secrets.AREA_CF_ACCESS_CLIENT_ID }}" \
            --service-token-secret "${{ secrets.AREA_CF_ACCESS_CLIENT_SECRET }}" \
            --log-level info > "$LOG" 2>&1 &
          echo $! > /tmp/cloudflared.pid

          actual_port=""
          for i in {1..40}; do
            if grep -oP 'Start Websocket listener host=127\.0\.0\.1:\K[0-9]+' "$LOG" >/dev/null 2>&1; then
              actual_port=$(grep -oP 'Start Websocket listener host=127\.0\.0\.1:\K[0-9]+' "$LOG" | tail -n1)
              break
            fi
            if grep -oP 'Listening on 127\.0\.0\.1:\K[0-9]+' "$LOG" >/dev/null 2>&1; then
              actual_port=$(grep -oP 'Listening on 127\.0\.0\.1:\K[0-9]+' "$LOG" | tail -n1)
              break
            fi
            sleep 0.25
          done

          if [ -z "$actual_port" ]; then
            echo "ERROR: failed to detect cloudflared local listener port. Dumping last 200 lines of log:" >&2
            tail -n 200 "$LOG" >&2 || true
            # also print the preferred port so logs show what we asked for
            echo "preferred_port=$preferred_port" >&2
            exit 1
          fi

          echo "Detected cloudflared listener port: $actual_port"
          echo "port=$actual_port" >> $GITHUB_OUTPUT

          for i in {1..40}; do (echo > /dev/tcp/127.0.0.1/$actual_port) >/dev/null 2>&1 && break; sleep 0.25; done

      - name: SSH and deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: 127.0.0.1
          port: ${{ steps.cf.outputs.port }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail
            cd ${{ secrets.VM_COMPOSE_PATH }}
            docker compose down -v
            docker compose pull
            docker compose up -d

      - name: Cleanup Cloudflare tunnel
        if: always()
        run: |
          set -euo pipefail
          if [ -f /tmp/cloudflared.pid ]; then
            kill "$(cat /tmp/cloudflared.pid)" || true
            rm -f /tmp/cloudflared.pid || true
          else
            # fallback: try to kill any stray cloudflared process
            pkill -f cloudflared || true
          fi
