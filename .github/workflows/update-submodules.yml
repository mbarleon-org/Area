name: Update submodules
on:
  workflow_call: {}
  workflow_dispatch: {}

jobs:
  update-submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout super-repo with submodules
        uses: actions/checkout@v5
        with:
          repository: mbarleon-org/Area
          ref: staging
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.AREA_PUSH_TOKEN }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fast-forward submodules to tracked branches
        id: fastforward
        run: |
          set -euo pipefail
          git submodule foreach '
            branch=$(git config -f $toplevel/.gitmodules submodule.$name.branch || echo main);
            git fetch origin "$branch";
            git checkout "$branch" || git switch -C "$branch";
            git reset --hard "origin/$branch"
          '
          git add .
          if git diff --cached --quiet; then
            echo "no_changes=1" >> $GITHUB_OUTPUT
          else
            git commit -m "chore(submodules): bump to latest"
            echo "no_changes=0" >> $GITHUB_OUTPUT
          fi

      - name: Push commit
        if: ${{ steps.fastforward.outputs.no_changes != '1' }}
        run: git push origin HEAD:refs/heads/staging
        env:
          GIT_ASKPASS: /bin/echo
          GITHUB_TOKEN: ${{ secrets.AREA_PUSH_TOKEN }}

      - name: Install cloudflared (single binary)
        if: ${{ steps.fastforward.outputs.no_changes != '1' }}
        run: |
          set -euo pipefail
          TMP_BIN=/tmp/cloudflared
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o "$TMP_BIN"
          chmod +x "$TMP_BIN"
          sudo mv "$TMP_BIN" /usr/local/bin/cloudflared

      - name: SSH to staging server and update service
        if: ${{ steps.fastforward.outputs.no_changes != '1' }}
        run: |
          set -euo pipefail

          /usr/local/bin/cloudflared access tcp \
            --hostname "${{ secrets.AREA_STAGING_SSH_HOST }}" \
            --url 127.0.0.1:2222 \
            --service-token-id ${{ secrets.AREA_CF_ACCESS_CLIENT_ID }} \
            --service-token-secret ${{ secrets.AREA_CF_ACCESS_CLIENT_SECRET }} \
            --log-level info &
          echo $! > /tmp/cloudflared.pid

          echo "${{ secrets.AREA_STAGING_SSH_KEY }}" > ~/id_rsa
          chmod 600 ~/id_rsa

          for i in {1..40}; do (echo > /dev/tcp/127.0.0.1/2222) >/dev/null 2>&1 && break; sleep 0.25; done

          ssh -i ~/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 2222 -l "${{ secrets.AREA_STAGING_SSH_USER }}" "127.0.0.1" /bin/bash <<'SSH'
            set -euo pipefail
            cd "${{ secrets.AREA_STAGING_REPO_PATH }}"
            docker compose down -v
            git fetch origin staging
            git checkout staging || git switch -C staging
            git reset --hard origin/staging
            git submodule sync --recursive
            git submodule update --init --recursive
            docker compose up -d --build --force-recreate
          SSH

      - name: Delete key and kill cloudflared
        if: always()
        run: |
          [ -f /tmp/cloudflared.pid ] && kill "$(cat /tmp/cloudflared.pid)" || true
          [ -f ~/id_rsa ] && rm -f ~/if_rsa || true
