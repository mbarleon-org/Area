name: Publish Docker image to GHCR

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-push:
    runs-on: [self-hosted, Linux, X64, trusted, docker]
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/area
      IMAGE_TAG: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Set BUILD_DATE (UTC ISO8601)
        id: build_date
        run: echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tags
        id: compute_tags
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          echo "TAGS<<EOF" >> "$GITHUB_OUTPUT"
          if [[ "${REF_NAME}" == *"-"* ]]; then
            echo "${IMAGE_NAME}:$(echo "$REF_NAME" | cut -d'-' -f 2)-latest" >> "$GITHUB_OUTPUT"
          else
            echo "${IMAGE_NAME}:latest" >> "$GITHUB_OUTPUT"
          fi
          echo "${IMAGE_NAME}:${REF_NAME}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            BUILD_DATE=${{ steps.build_date.outputs.BUILD_DATE }}
            VCS_REF=${{ github.sha }}
          tags: ${{ steps.compute_tags.outputs.TAGS }}
          platforms: linux/amd64,linux/arm64

      - name: SSH and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_SSH_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            cd ${{ secrets.VM_COMPOSE_PATH }}
            docker compose down -v
            docker compose pull
            docker compose up -d
