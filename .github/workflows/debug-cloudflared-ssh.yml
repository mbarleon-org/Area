name: Debug Cloudflared SSH tunnel

on:
  workflow_dispatch: {}

jobs:
  debug-tunnel:
    runs-on: ubuntu-latest
    steps:
      - name: Install cloudflared (single binary)
        run: |
          set -euo pipefail
          TMP_BIN=/tmp/cloudflared
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o "$TMP_BIN"
          chmod +x "$TMP_BIN"
          sudo mv "$TMP_BIN" /usr/local/bin/cloudflared

      - name: Start cloudflared and capture logs
        id: start
        env:
          CF_HOST: ${{ secrets.AREA_STAGING_SSH_HOST }}
          CF_ID: ${{ secrets.AREA_CF_ACCESS_CLIENT_ID }}
          CF_SECRET: ${{ secrets.AREA_CF_ACCESS_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          LOG=/tmp/cloudflared.log
          rm -f "$LOG"
          cloudflared access tcp \
            --hostname "$CF_HOST" \
            --url 127.0.0.1:22222 \
            --service-token-id "$CF_ID" \
            --service-token-secret "$CF_SECRET" \
            --log-level debug > "$LOG" 2>&1 &
          echo $! > /tmp/cloudflared.pid
          # wait a bit for cloudflared to start and write logs
          for i in {1..40}; do
            sleep 0.25
            if grep -Eo '127\.0\.0\.1:[0-9]+' "$LOG" >/dev/null 2>&1; then
              break
            fi
          done

      - name: Show cloudflared log
        run: |
          set -euo pipefail
          echo "=== /tmp/cloudflared.log (tail 200) ==="
          tail -n 200 /tmp/cloudflared.log || true

      - name: Detect actual listener port
        id: detect
        run: |
          set -euo pipefail
          LOG=/tmp/cloudflared.log
          # try a couple of patterns the binary might print
          port=""
          if grep -oP 'Start Websocket listener host=127\.0\.0\.1:\K[0-9]+' "$LOG" >/dev/null 2>&1; then
            port=$(grep -oP 'Start Websocket listener host=127\.0\.0\.1:\K[0-9]+' "$LOG" | tail -n1)
          elif grep -oP 'Listening on 127\.0\.0\.1:\K[0-9]+' "$LOG" >/dev/null 2>&1; then
            port=$(grep -oP 'Listening on 127\.0\.0\.1:\K[0-9]+' "$LOG" | tail -n1)
          elif grep -oP '127\\.0\\.0\\.1:\K[0-9]+' "$LOG" >/dev/null 2>&1; then
            port=$(grep -oP '127\\.0\\.0\\.1:\K[0-9]+' "$LOG" | tail -n1)
          fi
          if [ -z "$port" ]; then
            echo "FAILED_TO_DETECT_PORT"
            exit 2
          fi
          echo "port=$port" >> $GITHUB_OUTPUT
          echo "Detected port: $port"

      - name: TCP probe (nc)
        env:
          PORT: ${{ steps.detect.outputs.port }}
        run: |
          set -euo pipefail
          echo "Testing TCP connect to 127.0.0.1:$PORT"
          nc -vz 127.0.0.1 "$PORT" || true

      - name: Verbose SSH attempt (system ssh)
        continue-on-error: true
        env:
          PORT: ${{ steps.detect.outputs.port }}
          USER: ${{ secrets.AREA_STAGING_SSH_USER }}
          KEY: ${{ secrets.AREA_STAGING_SSH_KEY }}
        run: |
          set -euo pipefail
          printf '%s' "$KEY" > /tmp/debug_deploy_key
          chmod 600 /tmp/debug_deploy_key
          echo "Running: ssh -vvv -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /tmp/debug_deploy_key -p $PORT $USER@127.0.0.1 'echo SSH_OK'"
          ssh -vvv -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /tmp/debug_deploy_key -p "$PORT" "$USER"@127.0.0.1 'echo SSH_OK' || true

      - name: Cleanup cloudflared
        if: always()
        run: |
          set -euo pipefail
          [ -f /tmp/cloudflared.pid ] && kill "$(cat /tmp/cloudflared.pid)" || true
          rm -f /tmp/cloudflared.pid || true
          pkill -f cloudflared || true
